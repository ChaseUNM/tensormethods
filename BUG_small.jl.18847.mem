        - using LinearAlgebra, ITensors, ProgressMeter, BenchmarkTools, Random 
        - 
        - Random.seed!(42)
        - include("BUG_tucker(8-27).jl")
        - include("Hamiltonian.jl")
        - include("Tucker_Matrices.jl")
        - #Pratice BUG but don't form any large matrices
        - sz = [1 0; 0 -1]
        - sx = [0 1; 1 0]
        - sy = [0 -im; im 0]
        - 
        - function op_itensor(op, sites, ind)
        -     return ITensor(op, sites[ind], sites[ind]')
        - end
        - 
        - 
        - 
        - #Let H the xxx hamiltonian with J = -1, g = 1
        - 
        - # core_inds = inds(core)
        - # Q1, S1 = qr(core, core_inds[2], core_inds[3])
        - # Q2, S2 = qr(core, core_inds[1], core_inds[3])
        - # Q3, S3 = qr(core, core_inds[1], core_inds[2])
        - 
        - # K1 = factors[1]*S1 
        - # K2 = factors[2]*S2 
        - # K3 = factors[3]*S3
        - 
        - function applyH_tucker(op_list, Q, factors, site)
        0     # core_inds = inds(core)
        -     # not_site = setdiff(core_inds, [core_inds[site]])
        -     # Q, R = qr(core, not_site)
      160     new_factors = [] 
        0     N = length(factors)
        -     # println("N: $N")
        0     for i = 1:N
        -         # println("i: $i")
        0         if i == site
        -             # display(op_list[i])
        -             # display(factors[i])
        -             # println(op_list[i]*factors[i]) 
      480             push!(new_factors, op_list[i]*factors[i])
        -         else 
        -             # display(conj(factors[i]')*op_list[i]*factors[i])
        0             push!(new_factors, conj(factors[i]')*op_list[i]*factors[i])
        -         end
        -         # println("New factors: ")
        -         # println(new_factors)
        0     end
        0     return new_factors 
        - end
        - 
        - function applyH_mat(op_list, factors, site)
        -     # core_inds = inds(core)
        -     # not_site = setdiff(core_inds, [core_inds[site]])
        -     # Q, R = qr(core, not_site)
        -     # Preallocate new_factors with known sizes for efficiency
        0     new_factors = [zeros(eltype(factors[i]), size(factors[i], 2), size(factors[i], 2)) for i in 1:length(factors)]
        -     # Adjust size for the selected site, since op_list[site]*factors[site] changes shape
      720     new_factors[site] = zeros(eltype(factors[site]), size(op_list[site], 1), size(factors[site], 2))
        0     N = length(factors)
        -     # println("N: $N")
        0     for i = 1:N
        -         # println("i: $i")
        0         if i == site
        -             # display(op_list[i])
        -             # display(factors[i])
        -             # println(op_list[i]*factors[i]) 
        -             # new_factors[i] = op_list[i]*factors[i]
        0             mul!(new_factors[i], op_list[i], factors[i])
        -         else 
        -             # display(conj(factors[i]')*op_list[i]*factors[i])
        -             # new_factors[i] = (op_list[i]*factors[i])'*factors[i]
        0             mul!(new_factors[i], (op_list[i]*factors[i])', factors[i])
        -         end
        -         # println("New factors: ")
        -         # println(new_factors)
        0     end
        0     return new_factors 
        - end
        - 
        - function op_itensor_list(op_mat_list, sites) 
        0     N = length(op_mat_list)
      400     ops = Array{Any}(undef, N) 
        0     for i in 1:N 
        -         # op = op_itensor(op_mat_list, sites, i)
        0         op = ITensor(op_mat_list[i], sites[i], sites[i]')
        0         ops[i] = op 
        0     end
        0     return ops 
        - end
        - 
        - # K1_mat = rand(2,2)
        - # K1 = ITensor(K1_mat, inds(K1))
        - 
        - # Ident = Matrix(1.0*I, 2, 2)
        - # op = [sx, sz, sx]
        - # Q1_inds = inds(Q1)
        - # op_list = op_itensor_list(op, sites)
        - 
        - # factors_intermediate = [K1, factors[2], factors[3]]
        - # new_factors = applyH_tucker(op_list, Q1, factors_intermediate, 1)
        - # println("Answer: ")
        - # println(reconstruct(Q1, new_factors)*conj(Q1)')
        - 
        - # K1_mat = Array(K1, inds(K1))
        - # combine_Q = combiner(inds(Q1)[1], inds(Q1)[2])
        - # Q = Q1*combine_Q
        - # Q_mat = Array(Q, inds(Q))
        - # println("Answer 2")
        - # display(K1_mat*Q_mat*Q_mat') 
        - 
        - # A = zeros(2, 2, 2)
        - # A[:,:,1] = [1 2; 3 4]
        - # A[:,:,2] = [5 6; 7 8]
        - # A1 = ITensor(A, inds(Q1))
        - # A = A1*combine_Q 
        - # A_mat = Array(A, inds(A))
        - # # A_arr = reshape(Array(A1, inds(A1)), 2, 4)
        - 
        - 
        - # new_factors = applyH_tucker(op_list, A1, factors_intermediate, 1)
        - # println("Answer")
        - # ans1 = reconstruct(Q1, new_factors)*conj(Q1)'
        - # println(ans1)
        - 
        - 
        - # mat_factors = matricize_factors(factors)
        - # println("Answer 2")
        - # display(op[1]*K1_mat*Q_mat*(kron(mat_factors[3]'*op[3]'*mat_factors[3], mat_factors[2]*op[2]'*mat_factors[2]))*Q_mat')
        - 
        - # #Now try summing 
        - # ops1 = [sx, Ident, Ident]
        - # ops2 = [Ident, sx, Ident]
        - # ops1_itensor = op_itensor_list(ops1, sites)
        - # ops2_itensor = op_itensor_list(ops2, sites)
        - 
        - 
        - # new_factors1 = applyH_tucker(ops1_itensor, Q1, factors_intermediate, 1)
        - # new_factors2 = applyH_tucker(ops2_itensor, Q1, factors_intermediate, 1)
        - 
        - # println("Answer: ")
        - # ans_sum = (reconstruct(Q1, new_factors1) + reconstruct(Q1, new_factors2))*conj(Q1)'
        - # println(ans_sum)
        - # println("Answer 2")
        - # display((ops1[1]*K1_mat*Q_mat*(kron(mat_factors[3]'*ops1[3]'*mat_factors[3], mat_factors[2]*ops1[2]'*mat_factors[2])) + ops2[1]*K1_mat*Q_mat*(kron(mat_factors[3]'*ops2[3]'*mat_factors[3], mat_factors[2]*ops2[2]'*mat_factors[2])))*Q_mat')
        - 
        - function xxx_ops(N,J,g)
       32     op_list = [] 
        -     # create zz chain
        0     for i in 1:N-1
        0         ops = [Ident for _ in 1:N]
        -         # ops[i] = -J*sz 
        -         # ops[i + 1] = sz
       96         push!(op_list, ops)
        0     end
        -     #create the x chain
        0     for i in 1:N 
        0         ops = [Ident for _ in 1:N]
       32         ops[i] = -g*J*sx
        0         push!(op_list, ops)
        0     end
        0     return op_list
        - end
        - 
        - function identity_ops(N)
        0     ops = [Ident for _ in 1:N]
        0     return ops 
        - end
        - 
        - function total_H_itensor(op_list_list, sites)
        0     N = length(op_list_list)
      160     op_list_list_itensor = Array{Any}(undef, N)
        0     for i in 1:N 
       80         op_list_list_itensor[i] = op_itensor_list(op_list_list[i], sites)
        0     end
        0     return op_list_list_itensor 
        - end
        - 
        - function K_evolution_mat(core, factors, site, K, ops_list)
        -     core_inds = inds(core)
        -     not_site_inds = setdiff(core_inds, [core_inds[site]])
        -     Q, S = qr(core, not_site_inds)
        -     K = factors[site]*S 
        -     K = Array(K, inds(K))
        -     C = combiner(not_site_inds;tags = "c")
        -     Q_arr = Q*C 
        -     Q_arr = Array(Q_arr, inds(Q_arr))
        - 
        -     N_ops = length(ops_list)
        -     mat_factors = matricize_factors(factors)
        -     init = ops_list[1][1]*K*Q_arr*kron(mat_factors[3]'*ops_list[1][3]'*mat_factors[3], mat_factors[2]*ops_list[1][2]'*mat_factors[2])
        -     for i in 2:N_ops
        -         init += ops_list[i][1]*K*Q_arr*kron(mat_factors[3]'*ops_list[i][3]'*mat_factors[3], mat_factors[2]*ops_list[i][2]'*mat_factors[2])
        -     end
        -     Kdot = init*Q_arr' 
        -     return Kdot
        - end
        -     
        - 
        - function K_evolution_itensor(core,factors,site, K, total_H,sites)
        -     core_inds = inds(core)
        -     not_site_inds = setdiff(core_inds, [core_inds[site]])
        -     Q, S = qr(core, not_site_inds)
        -     K_ten = factors[site]*S
        -     # println("K_ten")
        -     # println(K_ten)
        -     factors_copy = copy(factors)
        -     factors_intermediate = factors_copy 
        -     # K_inds = inds(factors[site]*S)
        -     # K_ten = ITensor(K, K_inds)
        -     factors_intermediate[site] = K_ten
        - 
        -     N_ops = length(total_H)
        -     
        -     new_factors = applyH_tucker(total_H[1], Q, factors_intermediate, site)
        -     # println("Q")
        -     # display(Q)
        -     # println("factors_intermediate")
        -     # display(factors_intermediate)
        -     init = reconstruct(Q, new_factors)
        -     # display(init)
        -     @time begin 
        -     for i in 2:N_ops 
        -         new_factors = applyH_tucker(total_H[i], Q, factors_intermediate, site)
        -         init += reconstruct(Q, new_factors)
        -     end
        -     # display(init)
        -     K_dot = init*conj(Q')
        -     end
        -     return K_dot, K_ten
        - end
        - 
        - function K_evolution_itensor(core,factors,site, total_H, sites)
        0     core_inds = inds(core)
      352     not_site_inds = setdiff(core_inds, [core_inds[site]])
        0     Q, S = qr(core, not_site_inds)
        0     K_ten = factors[site]*S
        -     # println("K_ten")
        -     # println(K_ten)
      160     factors_copy = copy(factors)
        -     factors_intermediate = factors_copy 
        -     # K_inds = inds(factors[site]*S)
        -     # K_ten = ITensor(K, K_inds)
        0     factors_intermediate[site] = K_ten
        - 
        0     N_ops = length(total_H)
        -     # println("N_ops: $N_ops")
        0     new_factors = applyH_tucker(total_H[1], Q, factors_intermediate, site)
        -     # println("Tensor Factors: ")
        -     # for i in 1:length(factors)
        -     #     println("Factor $i: ")
        -     #     display(Array(new_factors[i], inds(new_factors[i])))
        -     # end
        -     # println("Q")
        -     # display(Q)
        -     # println("factors_intermediate")
        -     # display(factors_intermediate)
        0     init = reconstruct(Q, new_factors)
        -     # println("Q: ")
        -     # display(Array(Q, inds(Q)))
        -     # println(Q)
        -     # println("Init: ")
        -     # display(init)
        -     # display(Array(init, inds(init)))
        -     # println("Ten Q*factor2: ")
        -     # ans_temp = Q*new_factors[1]
        -     # ans_inds = inds(ans_temp)
        -     # println(Q)
        -     # println(ans_temp)
        -     # println(Q*new_factors[2])
        -     # display(Array(Q*new_factors[2], inds(Q*new_factors[2])))
        -     # @time begin 
        0     for i in 2:N_ops 
        0         new_factors = applyH_tucker(total_H[i], Q, factors_intermediate, site)
        0         init += reconstruct(Q, new_factors)
        0     end
        -     # display(init)
        0     K_dot = noprime(init*conj(Q'))
        -     # end
      160     return K_dot, K_ten, new_factors, Q
        - end
        - 
        - function K_evolution_mat(core,factors,site, total_H)
        -     # core_inds = inds(core)
        -     # not_site_inds = setdiff(core_inds, [core_inds[site]])
        -     # Q, S = qr(core, not_site_inds)
        0     Q, S = qr(transpose(matricization(core, site)))
        0     Q = Array(Q)[:,1:size(core, site)]
      208     Q_ten = refold_mat(Array(transpose(Q)), size(core), site)
        - 
      144     K = factors[site]*transpose(S)
        -     # K_ten = factors[site]*S
        -     # println("K_ten")
        -     # println(K_ten)
       80     factors_copy = copy(factors)
        -     factors_intermediate = factors_copy 
        -     # K_inds = inds(factors[site]*S)
        -     # K_ten = ITensor(K, K_inds)
        0     factors_intermediate[site] = K
        - 
        0     N_ops = length(total_H)
        0     new_factors = applyH_mat(total_H[1], factors_intermediate, site)
        -     # println("Matrix Factors: ")
        -     # for i in 1:length(factors)
        -     #     println("Factor $i: ")
        -     #     display(new_factors[i])
        -     # end
        -     # println("Q")
        -     # display(Q)
        -     # println("factors_intermediate")
        -     # display(factors_intermediate)
        0     init = Multi_TTM(Q_ten, new_factors)
        -     # println("Q: ")
        -     # display(Q_ten)
        -     # println("Init:")
        -     # display(init)
        -     # println("Arr Q*factor2: ")
        -     # display(TTM(Q_ten, new_factors[1], 1))
        -     # @time begin 
        0     for i in 2:N_ops 
        0         new_factors = applyH_mat(total_H[i], factors_intermediate, site)
        0         init += Multi_TTM(Q_ten, new_factors)
        0     end
        - 
        -     # display(init)
        -     # println("Mat_i Init size: ", size(matricization(init, site)))
        -     # println("Q' size: ", size(Q))
        0     K_dot = matricization(init, site)*conj(Q)
        -     # end
      160     return K_dot, K, new_factors, Q_ten
        - end
        - 
        - function C_dot_itensor(core, factors, total_H, sites)
        -     N_ops = length(total_H)
        -     N_factors = length(factors)
        -     mat_factors = matricize_factors(factors)
        -     desired_inds = prime(inds(core))
        -     init = ITensor(desired_inds)
        -     new_factors = []
        -     new_factors = Array{Any}(undef, N_factors)
        -     # factor_multiple_time1 = 0.0
        -     # factor_multiple_time2 = 0.0
        -     for i in 1:N_ops 
        -         for j in 1:N_factors 
        -             # new_factor = mat_factors[j]'*Array(total_H[i][j], inds(total_H[i][j]))*mat_factors[j]
        -             # println(new_factor)
        -             # new_factors[j] = ITensor(new_factor, inds(core)[j], inds(core)[j]')
        -             # mult_elapsed = @elapsed begin
        -             #     new_factors[j] = ITensor(mat_factors[j]'*Array(total_H[i][j], inds(total_H[i][j]))*mat_factors[j] , inds(core)[j], inds(core)[j]')
        -             # # new_factors[j] = conj(factors[j]')*total_H[i][j]*factors[j]
        -             # end
        -             # @time begin 
        -             new_factors[j] = conj(factors[j]')*total_H[i][j]*factors[j]
        -             # end
        -             # factor_multiple_time1 += mult_elapsed
        -             # factor_multiple_time2 += mult_elapsed2
        -             # push!(new_factors, conj(factors[j]')*total_H[i][j]*factors[j])
        -         end
        -         # println(core)
        -         # println(new_factors)
        -         # time_elapsed = @elapsed begin
        -         init += reconstruct(core, new_factors)
        -         # reconstruct_time += time_elapsed
        -     end
        -     # display(new_factors)
        -     return init
        - end
        - 
        - function C_dot_itensor_im(core, factors, total_H, sites)
        0     N_ops = length(total_H)
        0     N_factors = length(factors)
        0     mat_factors = matricize_factors(factors)
      544     desired_inds = prime(inds(core))
        0     init = ITensor(desired_inds)
        -     new_factors = []
       80     new_factors = Array{Any}(undef, N_factors)
        -     # factor_multiple_time1 = 0.0
        -     # factor_multiple_time2 = 0.0
        0     for i in 1:N_ops 
        0         for j in 1:N_factors 
        -             # new_factor = mat_factors[j]'*Array(total_H[i][j], inds(total_H[i][j]))*mat_factors[j]
        -             # println(new_factor)
        -             # new_factors[j] = ITensor(new_factor, inds(core)[j], inds(core)[j]')
        -             # mult_elapsed = @elapsed begin
        -             #     new_factors[j] = ITensor(mat_factors[j]'*Array(total_H[i][j], inds(total_H[i][j]))*mat_factors[j] , inds(core)[j], inds(core)[j]')
        -             # # new_factors[j] = conj(factors[j]')*total_H[i][j]*factors[j]
        -             # end
        -             # @time begin 
        0             new_factors[j] = conj(factors[j]')*total_H[i][j]*factors[j]
        -             # println("Factor $j")
        -             # println(factors[j]')
        -             # println(factors[j])
        -             # println(total_H[i][j])
        -             # println(new_factors[j])
        -             # println("LOOK HERE")
        -             # display(new_factors[j])
        -             # end
        -             # factor_multiple_time1 += mult_elapsed
        -             # factor_multiple_time2 += mult_elapsed2
        -             # push!(new_factors, conj(factors[j]')*total_H[i][j]*factors[j])
        0         end
        -         # println(core)
        -         # println(new_factors)
        -         # time_elapsed = @elapsed begin
        -         # println("LOOK HERE NOW")
        -         # display(core)
        0         init += -im*reconstruct(core, new_factors)
        -         # reconstruct_time += time_elapsed
        0     end
        0     return noprime(init)
        - end
        - 
        - function C_dot_im_mat(core, factors, total_H)
        0     N_ops = length(total_H)
        -     # println("N_ops: $N_ops")
        0     N_factors = length(factors)
        -     # desired_inds = prime(inds(core))
        -     # init = ITensor(desired_inds)
        0     init = zeros(eltype(core), size(core)...)
        -     # new_factors = []
       80     new_factors = Vector{AbstractMatrix}(undef, N_factors)
        -     # factor_multiple_time1 = 0.0
        -     # factor_multiple_time2 = 0.0
        0     for i in 1:N_ops 
        0         for j in 1:N_factors 
        -             # new_factor = mat_factors[j]'*Array(total_H[i][j], inds(total_H[i][j]))*mat_factors[j]
        -             # println(new_factor)
        -             # new_factors[j] = ITensor(new_factor, inds(core)[j], inds(core)[j]')
        -             # mult_elapsed = @elapsed begin
        -             #     new_factors[j] = ITensor(mat_factors[j]'*Array(total_H[i][j], inds(total_H[i][j]))*mat_factors[j] , inds(core)[j], inds(core)[j]')
        -             # # new_factors[j] = conj(factors[j]')*total_H[i][j]*factors[j]
        -             # end
        -             # @time begin 
        -             # new_factors[j] = factors[j]'*total_H[i][j]*factors[j]
      240             new_factors[j] = (total_H[i][j]*factors[j])'*factors[j]
        -             # display(total_H[i][j])
        -             # println("Factor $j")
        -             # println(factors[j]')
        -             # println(factors[j])
        -             # println(total_H[i][j])
        -             # println(new_factors[j])
        -             # println("LOOK HERE")
        -             # display(new_factors[j])
        -             # end
        -             # factor_multiple_time1 += mult_elapsed
        -             # factor_multiple_time2 += mult_elapsed2
        -             # push!(new_factors, conj(factors[j]')*total_H[i][j]*factors[j])
        0         end
        -         # println(core)
        -         # println(new_factors)
        -         # time_elapsed = @elapsed begin
        -         # println("LOOK HERE NOW")
        -         # display(core)
        0         init += -im*Multi_TTM(core, new_factors)
        -         # reconstruct_time += time_elapsed
        0     end
        0     return init
        - end
        - 
        - 
        - function tensorize_factors(factors, inds)
        -     arr = []
        -     for i in 1:length(factors)
        -         push!(arr, ITensor(factors[i], inds[i], inds[i]'))
        -     end
        -     return arr 
        - end
        - 
        - function C_dot_itensor_eff(core, factors, total_H, total_H_arr, sites)
        -     N_ops = length(total_H)
        -     N_factors = length(factors)
        -     mat_factors = matricize_factors(factors)
        -     desired_inds = prime(inds(core))
        -     # println("Desired inds: ")
        -     # println(desired_inds)
        -     init = ITensor(desired_inds)
        -     new_factors = []
        -     new_factors = Array{Any}(undef, N_factors)
        -     # factor_multiple_time1 = 0.0
        -     # factor_multiple_time2 = 0.0
        -     for i in 1:N_ops 
        -         for j in 1:N_factors 
        -             # new_factor = mat_factors[j]'*Array(total_H[i][j], inds(total_H[i][j]))*mat_factors[j]
        -             # println(new_factor)
        -             # new_factors[j] = ITensor(new_factor, inds(core)[j], inds(core)[j]')
        -             # mult_elapsed = @elapsed begin
        -             #     new_factors[j] = ITensor(mat_factors[j]'*Array(total_H[i][j], inds(total_H[i][j]))*mat_factors[j] , inds(core)[j], inds(core)[j]')
        -             # # new_factors[j] = conj(factors[j]')*total_H[i][j]*factors[j]
        -             # end
        -             # @time begin 
        -             # display(conj(factors[j]')*total_H[i][j]*factors[j])
        -             # end
        -             # @time begin 
        -             new_factors[j] = mat_factors[j]'*total_H_arr[i][j]*mat_factors[j]
        -             # end
        -             # factor_multiple_time1 += mult_elapsed
        -             # factor_multiple_time2 += mult_elapsed2
        -             # push!(new_factors, conj(factors[j]')*total_H[i][j]*factors[j])
        -         end
        -         # println(core)
        -         # println(new_factors)
        -         # time_elapsed = @elapsed begin
        -         # display(reconstruct_mat(core, new_factors))
        -         init += reconstruct_mat(core, new_factors)
        -         # reconstruct_time += time_elapsed
        -     end
        -     # display(new_factors)
        -     return init
        - end
        - 
        - 
        - #Test Kdot and Cdot versus matrix versions 
        - #Create the Hamiltonian
        - # N = 3
        - # sites = siteinds("Qubit", N)
        - # cutoff = 0.0
        - 
        - # J = -1
        - # g = 1.0
        - # xxx_ops_list = xxx_ops(N, J, g)
        - # total_H = total_H_itensor(xxx_ops_list, sites)
        - # ident_ops = [identity_ops(N)]
        - # total_H_ident = total_H_itensor(ident_ops, sites)
        - 
        - # A = rand(ComplexF64, collect(fill(2, N))...)
        - # core_ten, factors_ten = tucker_itensor(A, sites; cutoff = 0.0)
        - # core_arr, factors_arr = tucker(A; cutoff = 0.0)
        - # Kdot1_arr,_, _,_ = K_evolution_mat(core_arr, factors_arr, 1, xxx_ops_list)
        - # Kdot1_ten,_, _,_ = K_evolution_itensor(core_ten, factors_ten, 1, total_H, sites)
        - 
        - # Cdot_ten = C_dot_itensor_im(core_ten, factors_ten, total_H, sites)
        - # Cdot_arr = C_dot_im_mat(core_arr, factors_arr, xxx_ops_list)
        - 
        - #Display Kdot 
        - # println("Kdot ITensor: ")
        - # display(Array(Kdot1_ten, inds(Kdot1_ten)))
        - # println("Kdot Mat: ")
        - # display(Kdot1_arr)
        - 
        - # println("Norm difference Kdot: ", norm(Array(Kdot1_ten, inds(Kdot1_ten)) - Kdot1_arr))
        - # println("Norm difference Cdot: ", norm(Array(Cdot_ten, inds(Cdot_ten)) - Cdot_arr))
        - # # ops1 = [sx, Ident, Ident]
        - # ops2 = [Ident, sx, Ident]
        - # ops1_itensor = op_itensor_list(ops1, sites)
        - # ops2_itensor = op_itensor_list(ops2, sites)
        - 
        - # total_H = [ops1_itensor, ops2_itensor]
        - # ops_list = [ops1, ops2]
        - 
        - # Kdot = K_evolution_mat(core, factors, 1, K1_mat, ops_list)
        - # # Kdot_ten = K_evolution_itensor(core, factors, 1, K1_mat, total_H, sites)
        - 
        - # #Compare result to code in bug_step
        - # xxx_ops_list = xxx_ops(N, 1, 1)
        - # total_H_xxx = total_H_itensor(xxx_ops_list, sites)
        - 
        - # H_mat = xxx(N, 1, 1)
        - # H_ten = ITensor(H_mat, sites, sites')
        - # @btime begin
        - # core_f,factors_f = bug_step_itensor(H_ten, core, factors, 0.01, sites)
        - # end
        - 
        - # core_f, factors_f = bug_step_itensor(H_ten, core, factors, 0.01, sites)
        - 
        - # Kdot2 = K_evolution_itensor(core, factors, 1, K2, total_H_xxx, sites)
        - 
        - # @btime begin 
        - # Kdot1 = K_evolution_itensor(core, factors, 1, K1, total_H_xxx, sites)
        - # Kdot2 = K_evolution_itensor(core, factors, 2, K2, total_H_xxx, sites)
        - # Kdot3 = K_evolution_itensor(core, factors, 3, K3, total_H_xxx, sites)
        - # end
        - 
        - #Now test the Cdot function 
        - #First create the "inefficient"? way to do it 
        - # @btime begin 
        - # inter_C = H_ten*reconstruct(core,factors)
        - # Cdot = reconstruct(inter_C, conj_factors2(factors))
        - # end
        - #Now test the "efficient"? way 
        - # @btime begin
        - # @btime begin
        - # Cdot_eff= C_dot_itensor_eff(core, factors, total_H_xxx, xxx_ops_list,sites)
        - # Cdot_eff = C_dot_itensor(core, factors, total_H_xxx, sites)
        - # end
        - # println("reconstruct_time: ", reconstruct_time)
        - # println("factor_multiple time: ", mult_time)
        - # println("factor_multiple time2: ", mult_time2)
        - # end
        - # println("Norm difference: ", norm(Cdot - Cdot_eff))
        - 
        - # println("'Slow' Runtime")
        - # @btime begin  
        - # core_f, factors_f = bug_step_itensor(H_ten, core, factors, 0.01, sites)
        - # end 
        -  
        - # println("'Fast' Runtime")
        - # @btime begin
        - # core_eff, factors_eff = bug_step_eff(total_H_xxx, core, factors, 0.01, sites)
        - # end
        - 
        - # println("End")
        - # for i in 1:N 
        - #     println("Norm Difference Factors: ", norm(Array(factors_f[i], inds(factors_f[i])) - Array(factors_eff[i], inds(factors_eff[i]))))
        - # end
        - # println("Norm Difference Core: ", norm(Array(core_f, inds(core_f)) - Array(core_eff, inds(core_eff))))
        - 
        - # q_state = [0,0,1]
        - # init_core, init_factors = tucker_separable(sites, q_state)
        - # init_mps = init_separable(sites, q_state)
        - # init_vec = ComplexF64.(vectorize_mps(init_mps, order = "reverse"))
        - # t0 = 0.0
        - # T = 1.0
        - # steps = 100
        - # h = (T - t0)/steps
        - # init_update = exp(-im*H_mat*(T - t0))*init_vec
        - # final_core, final_factors, _ = bug_integrator_itensor_ra(H_ten, init_core, init_factors, t0, T, steps, sites, 0.0)
        - 
        - # println("Norm difference: ", norm(init_update - vec_itensor(reconstruct(final_core, final_factors); order = "reverse")))
        - 
